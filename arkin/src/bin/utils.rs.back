use anyhow::Result;
use clap::{Parser, Subcommand};
use futures_util::StreamExt;
use mimalloc::MiMalloc;
use time::{macros::format_description, PrimitiveDateTime};
use tokio::{self, pin};
use tracing::info;

use arkin_core::prelude::*;
use arkin_ingestors::prelude::*;

/// CLI application for X
#[derive(Parser)]
#[clap(
    name = "Arkin Utils",
    version = "0.1.0",
    author = "Dorus Janssens",
    about = "This utility downloads data from various exchanges"
)]

struct Cli {
    #[clap(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    /// Processes streaming data
    Tardis {
        /// Sets the exchange to use
        #[clap(short, long)]
        venue: TardisExchange,

        /// Type of data to stream
        #[clap(short, long)]
        channel: TardisChannel,

        #[clap(short, long, value_delimiter = ',')]
        instruments: Vec<String>,

        /// Start date for the data stream
        #[clap(short, long)]
        start: String,

        /// End date for the data stream
        #[clap(short, long)]
        end: String,
    },
}

#[global_allocator]
static GLOBAL: MiMalloc = MiMalloc;

#[tokio::main(flavor = "multi_thread")]
async fn main() -> Result<()> {
    init_tracing();
    info!("Starting Arkin Utils ðŸš€");

    // let config = load::<PersistanceConfig>();
    // let persistance_service = Arc::new(PersistanceService::from_config(&config.database));

    let args = Cli::parse();

    match args.command {
        Commands::Tardis {
            venue,
            channel,
            instruments,
            start,
            end,
        } => {
            let format = format_description!("[year]-[month]-[day] [hour]:[minute]");
            let start = PrimitiveDateTime::parse(&start, &format)?.assume_utc();
            let end = PrimitiveDateTime::parse(&end, &format)?.assume_utc();

            info!("Starting data stream");
            info!("Exchange: {}", venue);
            info!("Channel: {}", venue.channel_str(&channel)?);
            info!("Instruments: {:?}", instruments);
            info!("Start: {}", start);
            info!("End: {}", end);

            let req = TardisRequest::new(&venue, &channel, &instruments, &start, &end);
            let tardis = TardisProvider::builder()
                .base_url("https://api.tardis.dev/v1/data-feeds".into())
                .api_secret(Some(
                    "TD.DCMMZ1tjYHSgDZb4.XLraXTAaKGBHX1h.P3QBqskIDGEEHSY.bgAmXDtpCKxPSOF.JAvZUDBMFG1WyGw.2r9H".into(),
                ))
                .max_concurrent_requests(1)
                .build();
            let stream = tardis.stream(req);
            pin!(stream);
            // process_stream_concurrently(stream, manager.clone(), 10).await;

            // batch insert 5000 events
            // let mut events = Vec::with_capacity(10000);
            while let Some((ts, json)) = stream.next().await {
                info!("TS: {} JSON: {}", ts, json);
            }
        }
    }
    Ok(())
}
